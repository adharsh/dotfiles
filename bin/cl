#!/usr/bin/env python3

import argparse
import re
import threading
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

import requests

CLOCKIFY_API_KEY = "ZWUzZWYwZmMtZGM0My00M2NmLTk3NjctYjg2YjYwODM2NGQx"


class ClockifyAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.clockify.me/api/v1"
        self.headers = {"X-Api-Key": self.api_key, "Content-Type": "application/json"}
        self.projects_cache = {}

    def get_user_id(self) -> str:
        """Get the current user's ID."""
        response = requests.get(f"{self.base_url}/user", headers=self.headers)
        response.raise_for_status()
        return response.json()["id"]

    def get_workspaces(self) -> List[Dict]:
        """Get all workspaces for the user."""
        response = requests.get(f"{self.base_url}/workspaces", headers=self.headers)
        response.raise_for_status()
        return response.json()

    def get_projects(self, workspace_id: str) -> List[Dict]:
        """Get all projects in a workspace."""
        response = requests.get(
            f"{self.base_url}/workspaces/{workspace_id}/projects", headers=self.headers
        )
        response.raise_for_status()
        return response.json()

    def get_project_name(self, workspace_id: str, project_id: Optional[str]) -> str:
        """
        Get project name from project ID using cache.
        Returns 'No Project' if project_id is None or not found.
        """
        if not project_id:
            return "No Project"

        # Initialize cache for workspace if not exists
        if workspace_id not in self.projects_cache:
            projects = self.get_projects(workspace_id)
            self.projects_cache[workspace_id] = {
                project["id"]: project["name"] for project in projects
            }

        return self.projects_cache[workspace_id].get(project_id, "Unknown Project")

    def get_project_tasks(self, workspace_id: str, project_id: str) -> List[Dict]:
        """Get all tasks for a specific project."""
        response = requests.get(
            f"{self.base_url}/workspaces/{workspace_id}/projects/{project_id}/tasks",
            headers=self.headers,
        )
        response.raise_for_status()
        return response.json()

    def get_time_entries(
        self, workspace_id: str, start_time: str, end_time: str
    ) -> List[Dict]:
        """
        Get all time entries between start_time and end_time.
        Times should be in ISO 8601 format with timezone (e.g., '2024-03-15T00:00:00Z')
        """
        user_id = self.get_user_id()

        response = requests.get(
            f"{self.base_url}/workspaces/{workspace_id}/user/{user_id}/time-entries",
            headers=self.headers,
            params={"start": start_time, "end": end_time},
        )
        response.raise_for_status()
        return response.json()

    def parse_duration(self, duration_str: str) -> timedelta:
        """
        Parse ISO 8601 duration string into timedelta object.
        Handles formats like 'PT15M49S', 'PT2H30M', 'PT1H30M45S', etc.
        """
        if not duration_str or duration_str == "ongoing":
            return timedelta(0)

        pattern = r"PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?"
        match = re.match(pattern, duration_str)

        if not match:
            return timedelta(0)

        hours = int(match.group(1) or 0)
        minutes = int(match.group(2) or 0)
        seconds = int(match.group(3) or 0)

        return timedelta(hours=hours, minutes=minutes, seconds=seconds)

    @staticmethod
    def format_duration(td: timedelta) -> str:
        """
        Format timedelta into a readable string (e.g., "2h 30m 45s").
        """
        total_seconds = int(td.total_seconds())
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60

        parts = []
        if hours > 0:
            parts.append(f"{hours}h")
        if minutes > 0:
            parts.append(f"{minutes}m")
        if seconds > 0:
            parts.append(f"{seconds}s")

        return " ".join(parts) if parts else "0s"

    def format_time_entries(self, workspace_id: str, entries: List[Dict]) -> List[Dict]:
        """Format time entries for better readability."""
        formatted_entries = []
        for entry in entries:
            project_id = entry.get("projectId")
            project_name = self.get_project_name(workspace_id, project_id)

            duration_str = entry.get("timeInterval", {}).get("duration", "ongoing")
            duration_td = self.parse_duration(duration_str)

            formatted_entry = {
                "project": project_name,
                "project_id": project_id,
                "task": entry.get("taskName", "No Task"),
                "description": entry.get("description", "No Description"),
                "start_time": entry["timeInterval"]["start"],
                "end_time": entry["timeInterval"]["end"],
                "duration_str": duration_str,
                "duration": duration_td,
                "duration_formatted": self.format_duration(duration_td),
            }
            formatted_entries.append(formatted_entry)
        return formatted_entries


def get_time_window(date: datetime) -> tuple[datetime, datetime]:
    """
    Calculate the start (6 AM) and end (3 AM next day) times for a given date.
    """
    local_tz = datetime.now().astimezone().tzinfo
    if date.tzinfo is None:
        date = date.replace(tzinfo=local_tz)

    # Set start time to 6 AM on the given date
    start_time = date.replace(hour=6, minute=0, second=0, microsecond=0)

    # Set end time to 3 AM the next day
    end_time = (date + timedelta(days=1)).replace(
        hour=3, minute=0, second=0, microsecond=0
    )

    return start_time, end_time


def parse_input(input_str: str) -> datetime:
    """
    Parse input string into a datetime object. Accepts:
    - No argument: returns today
    - Integer n: returns date n days ago
    - Date in MM/DD/YYYY format
    """
    local_tz = datetime.now().astimezone().tzinfo
    today = datetime.now(local_tz)

    if not input_str:  # No argument provided
        return today

    # Try parsing as integer (days ago)
    try:
        days_ago = int(input_str)
        if days_ago < 0:
            raise argparse.ArgumentTypeError("Days argument must be non-negative")
        return today - timedelta(days=days_ago)
    except ValueError:
        pass

    # Try parsing as date string (MM/DD/YYYY)
    try:
        parsed_date = datetime.strptime(input_str, "%m/%d/%Y")
        return parsed_date.replace(tzinfo=local_tz)
    except ValueError:
        raise argparse.ArgumentTypeError(
            "Invalid format. Use either:\n"
            "- No argument for today\n"
            "- A non-negative number for days ago\n"
            "- MM/DD/YYYY format for specific date"
        )


def get_project_tasks(api_key: str, date: datetime) -> List[Dict]:
    """
    Main function to get all projects and tasks between 6 AM on the given date
    and 3 AM the next day.
    """
    # Get start and end times
    start_time, end_time = get_time_window(date)

    # Convert times to ISO 8601 format
    start_iso = start_time.isoformat()
    end_iso = end_time.isoformat()

    api = ClockifyAPI(api_key)

    # Get first workspace (modify if you need a specific workspace)
    workspaces = api.get_workspaces()
    if not workspaces:
        raise ValueError("No workspaces found")

    workspace_id = workspaces[0]["id"]

    # Get time entries
    entries = api.get_time_entries(workspace_id, start_iso, end_iso)

    # Format entries with project names
    return api.format_time_entries(workspace_id, entries)


def print_daily_report(target_date: datetime, entries: List[Dict]) -> None:
    print(f"=== Daily Time Report: {target_date.strftime('%B %d, %Y')} ===")

    project_totals = defaultdict(timedelta)
    total_time = timedelta(0)

    for entry in entries:
        project_totals[entry["project"]] += entry["duration"]
        total_time += entry["duration"]

    # Convert to list and sort by duration
    sorted_projects = sorted(project_totals.items(), key=lambda x: x[1], reverse=True)

    # Find the longest project name for padding
    max_project_length = (
        max(len(project) for project, _ in sorted_projects) if sorted_projects else 0
    )

    # Print each project with aligned columns
    for project, duration in sorted_projects:
        percentage = duration.total_seconds() / total_time.total_seconds() * 100
        print(
            f"{project:<{max_project_length}}    {ClockifyAPI.format_duration(duration):<12} {percentage:>5.1f}%"
        )

    print("\nTotal tracked time:", ClockifyAPI.format_duration(total_time))


def fetch_project_tasks(
    api: ClockifyAPI, workspace_id: str, project: Dict
) -> Tuple[str, str, List[Dict]]:
    """
    Helper function to fetch tasks for a single project.
    Returns tuple of (project_id, project_name, tasks)
    """
    project_id = project["id"]
    project_name = project["name"]
    try:
        tasks = api.get_project_tasks(workspace_id, project_id)
        return project_id, project_name, tasks
    except requests.exceptions.RequestException as e:
        print(f"Error getting tasks for project {project_name}: {e}")
        return project_id, project_name, []


def print_task_report(api_key: str) -> None:
    """Print a detailed task breakdown report for each project using parallel processing."""
    print("=== Complete Task Report ===")

    # Thread-local storage for the API client
    thread_local = threading.local()

    def get_api():
        if not hasattr(thread_local, "api"):
            thread_local.api = ClockifyAPI(api_key)
        return thread_local.api

    # Get first workspace
    api = get_api()
    workspaces = api.get_workspaces()
    if not workspaces:
        raise ValueError("No workspaces found")

    workspace_id = workspaces[0]["id"]

    # Get all projects in a single request
    try:
        projects = api.get_projects(workspace_id)
    except requests.exceptions.RequestException as e:
        print(f"Error getting projects: {e}")
        return

    if not projects:
        print("No projects found.")
        return

    # Use ThreadPoolExecutor to fetch tasks for all projects in parallel
    all_project_tasks = {}
    project_id_to_name = {}
    max_task_length = 0

    # Determine the optimal number of workers (you can adjust this based on your needs)
    max_workers = min(len(projects), 10)  # Limit to 10 concurrent requests

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        # Create future objects for all project task fetches
        future_to_project = {
            executor.submit(
                fetch_project_tasks, get_api(), workspace_id, project
            ): project
            for project in projects
        }

        # Process completed futures as they come in
        for future in as_completed(future_to_project):
            project_id, project_name, tasks = future.result()

            if tasks:  # Only store projects that have tasks
                all_project_tasks[project_id] = tasks
                project_id_to_name[project_id] = project_name

                # Update max task length
                project_max_length = max(
                    (len(task["name"]) for task in tasks), default=0
                )
                max_task_length = max(max_task_length, project_max_length)

    if not all_project_tasks:
        print("No tasks found in any projects.")
        return

    max_task_length += 4  # Add space for tree structure

    # Sort projects by name for consistent output
    sorted_project_ids = sorted(
        all_project_tasks.keys(), key=lambda x: project_id_to_name[x]
    )

    # Process and display each project's tasks
    for project_id in sorted_project_ids:
        project_name = project_id_to_name[project_id]
        tasks = all_project_tasks[project_id]

        print(f"{project_name}")

        # Sort tasks by duration
        sorted_tasks = []
        for task in tasks:
            duration = api.parse_duration(task.get("duration", "PT0S"))
            sorted_tasks.append((task["name"], duration))

        sorted_tasks.sort(key=lambda x: x[1], reverse=True)

        # Print each task
        for i, (task_name, duration) in enumerate(sorted_tasks):
            prefix = "  └─ " if i == len(sorted_tasks) - 1 else "  ├─ "
            minutes = int(duration.total_seconds() / 60)
            formatted_duration = api.format_duration(duration)
            print(
                f"{prefix}{task_name:<{max_task_length-4}}{formatted_duration:>12}    {minutes:>4}m"
            )


def main():
    parser = argparse.ArgumentParser(
        description="Fetch Clockify time entries. Usage: cl [days_ago | MM/DD/YYYY]"
    )
    parser.add_argument(
        "date",
        type=str,
        nargs="?",
        default="",
        help="Optional: number of days ago (non-negative integer) or specific date (MM/DD/YYYY)",
    )
    parser.add_argument(
        "--tasks",
        action="store_true",
        help="Show detailed task breakdown for each project",
    )

    args = parser.parse_args()

    try:
        if args.tasks:
            print_task_report(CLOCKIFY_API_KEY)
        else:
            target_date = parse_input(args.date)
            entries = get_project_tasks(CLOCKIFY_API_KEY, target_date)
            print_daily_report(target_date, entries)

    except requests.exceptions.RequestException as e:
        print(f"API Error: {e}")
    except Exception as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
