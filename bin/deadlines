#!/home/adharsh/miniforge3/envs/basic/bin/python

import argparse
from pathlib import Path
from datetime import datetime, timedelta
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from concurrent.futures import ThreadPoolExecutor
from threading import local
from tenacity import retry, wait_exponential
import pickle
import pandas as pd

# Download credentials.json from Google Cloud Console and place in below defined config directory
# https://console.cloud.google.com/apis/credentials?project=calendar-api-441018

# Constants
SCOPES = ['https://www.googleapis.com/auth/calendar']
CONFIG_DIR = Path.home() / 'dotfiles' / 'credentials' / 'google_calendar'
CREDENTIALS_PATH = CONFIG_DIR / 'credentials.json'
TOKEN_PATH = CONFIG_DIR / 'token.pickle'

# Number of hours availabe for each day of the week
# Total: 50 hours
HOURS_PER_DAY = {
    "Monday": 7,
    "Tuesday": 9,
    "Wednesday": 9,
    "Thursday": 4,
    "Friday": 4,
    "Saturday": 6,
    "Sunday": 11
}

@retry(
    wait=wait_exponential(multiplier=2, min=10, max=60),
    reraise=True,
    before_sleep=lambda retry_state: print(f"Rate limit hit, retrying in {retry_state.next_action.sleep} seconds...")
)
def delete_event_with_retry(service, calendar_id, event_id):
    try:
        service.events().delete(
            calendarId=calendar_id,
            eventId=event_id
        ).execute()
    except HttpError as e:
        print(f"Error deleting event {event_id}: {str(e)}")
        raise

@retry(
    wait=wait_exponential(multiplier=2, min=10, max=60),
    reraise=True,
    before_sleep=lambda retry_state: print(f"Rate limit hit, retrying in {retry_state.next_action.sleep} seconds...")
)
def create_event_with_retry(service, calendar_id, event_body):
    try:
        return service.events().insert(
            calendarId=calendar_id,
            body=event_body
        ).execute()
    except HttpError as e:
        print(f"Error creating event: {str(e)}")
        raise

thread_local = local()

def get_service():
    """Get a thread-local Calendar API service object"""
    if not hasattr(thread_local, "service"):
        creds = get_credentials()
        thread_local.service = build('calendar', 'v3', credentials=creds)
    return thread_local.service

def get_credentials():
    """Get valid credentials, either from token file or by authenticating."""
    creds = None
    
    # Ensure config directory exists
    CONFIG_DIR.mkdir(parents=True, exist_ok=True)
    
    # Try to load existing token
    if TOKEN_PATH.exists():
        with open(TOKEN_PATH, 'rb') as token:
            creds = pickle.load(token)
    
    # If no valid credentials available, authenticate
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                str(CREDENTIALS_PATH),
                SCOPES
            )
            creds = flow.run_local_server(port=0)
        
        # Save the credentials for future runs
        with open(TOKEN_PATH, 'wb') as token:
            pickle.dump(creds, token)
    
    return creds


def delete_all_events(calendar_name):
    """
    Delete all events from a specified calendar
    
    Args:
        calendar_name (str): Name of the calendar to delete events from
    """
    service = get_service()
    
    print(f"\nStarting calendar cleanup process...")
    
    # Get calendar ID by name ONCE at the start
    calendar_list = service.calendarList().list().execute()
    calendar_id = None
    
    for calendar in calendar_list['items']:
        if calendar['summary'] == calendar_name:
            calendar_id = calendar['id']
            break
    
    if not calendar_id:
        raise ValueError(f"Calendar '{calendar_name}' not found")
    
    # Get all events
    events_result = service.events().list(
        calendarId=calendar_id,
        maxResults=2500
    ).execute()
    
    events = events_result.get('items', [])
    total_events = len(events)
    print(f"Found {total_events} events to delete")
    
    def delete_event(event):
        service = get_service()  # Get fresh service for each thread
        delete_event_with_retry(service, calendar_id, event['id'])

    # Delete events in parallel
    with ThreadPoolExecutor(max_workers=3) as executor:
        list(executor.map(delete_event, events))
    
    print("Successfully deleted all events!")


def load_csv_data(file_path):
    """
    Load CSV file, evaluate mathematical expressions, and handle empty actual_hrs entries.
    
    Args:
        file_path (str or Path): Path to the CSV file
        
    Returns:
        pandas.DataFrame: Processed DataFrame with evaluated expressions and empty actual_hrs as NaN
    """
    # Convert string path to Path object if needed
    path = Path(file_path) if isinstance(file_path, str) else file_path
    
    # Read CSV file
    df = pd.read_csv(path, skipinitialspace=True, comment='#')
    
    # Function to safely evaluate mathematical expressions
    def safe_eval(x):
        try:
            if pd.isna(x) or x == '':
                return pd.NA
            return eval(str(x))
        except Exception:
            return x
    
    # Evaluate expressions in estimated_hrs and actual_hrs columns
    df['estimated_hrs'] = df['estimated_hrs'].apply(safe_eval)
    df['actual_hrs'] = df['actual_hrs'].apply(safe_eval)

    return df

def format_days(total_days):
    """
    Format a duration in days to a string showing months, weeks, and days.
    
    Args:
        total_days (int): Total number of days
        
    Returns:
        str: Formatted string like "1 month, 2 weeks, 3 days" or "5 days"
    """
    # Calculate months (assuming 30 days per month)
    months = total_days // 30
    remaining_days = total_days % 30
    
    # Calculate weeks from remaining days
    weeks = remaining_days // 7
    days = remaining_days % 7
    
    # Build the output string
    parts = []
    
    if months > 0:
        parts.append(f"{months}m")
    
    if weeks > 0:
        parts.append(f"{weeks}w")
    
    if days > 0:
        parts.append(f"{days}d")
    
    # Handle special case when duration is 0
    if not parts:
        return "0d"
    
    return " ".join(parts)

def format_hours(total_hours):
    """
    Format a duration in hours to a string showing months, weeks, days, and hours.
    
    Args:
        total_hours (int): Total number of hours
        
    Returns:
        str: Formatted string like "1m 2w 3d 4h" or "5h"
    """
    # Calculate days from hours
    total_days = total_hours // 24
    hours = total_hours % 24
    
    # Calculate months (assuming 30 days per month)
    months = total_days // 30
    remaining_days = total_days % 30
    
    # Calculate weeks from remaining days
    weeks = remaining_days // 7
    days = remaining_days % 7
    
    # Build the output string
    parts = []
    
    if months > 0:
        parts.append(f"{months}m")
    
    if weeks > 0:
        parts.append(f"{weeks}w")
    
    if days > 0:
        parts.append(f"{days}d")
        
    if hours > 0:
        parts.append(f"{hours}h")
    
    # Handle special case when duration is 0
    if not parts:
        return "0h"
    
    return " ".join(parts)


def schedule_tasks(filepath, calendar_name="Focus", start_tomorrow=True, no_sync=False):
    """
    Schedule tasks from CSV file into calendar based on available hours per day.
    
    Args:
        filepath (str): Path to the CSV file containing tasks
        start_tomorrow (bool): If True, start scheduling from tomorrow; if False, start from today
    """
    # Load and process CSV
    df = load_csv_data(filepath)
    
    # Get start date
    start_date = datetime.now() + timedelta(days=1 if start_tomorrow else 0)
    current_date = start_date

    # Calculate padding lengths
    max_project_len = max(len(str(p)) for p in df['project']) + 5  # Add some buffer
    max_task_len = max(len(str(t)) for t in df['task']) + 5  # Add some buffer
    
    # Initialize hours remaining for the current day
    current_day = current_date.strftime("%A")
    hours_remaining = HOURS_PER_DAY[current_day]
    
    # Process each task
    events = []
    for _, row in df.iterrows():

        # Skip tasks that are already completed
        if row['actual_hrs'] is not pd.NA:
            continue

        task_hours = row['estimated_hrs']
        
        # While we still have hours to allocate for this task
        while task_hours > 0:
            # If we can fit the task in today's remaining time
            if task_hours <= hours_remaining:
                hours_for_this_day = task_hours
            else:
                hours_for_this_day = hours_remaining

            # Create calendar event
            events.append({
                "date": current_date,
                "project": row['project'],
                "task": row['task'],
                # "description": row['description'],
                "estimated_hrs": hours_for_this_day,
            })
            
            hours_remaining -= hours_for_this_day
            task_hours -= hours_for_this_day
            
            if task_hours > 0:
                # Move to next day
                current_date += timedelta(days=1)
                current_day = current_date.strftime("%A")
                hours_remaining = HOURS_PER_DAY[current_day]

    # Calculate max duration length from all events
    max_duration_len = max(len(format_hours(event['estimated_hrs'])) for event in events) + 5  # Add some buffer

    # Print project and task timeline
    start_date = start_date
    last_project = events[0]['project']
    first_task_deadline = events[0]['date']
    last_task_deadline = None
    current_project_output = "" 

    print(f"Timeline from {(start_date + timedelta(days=1)).strftime('%Y-%m-%d')}.")
    for event in events:
        current_deadline = event['date']
        project = event['project']
        task = event['task']
        
        # Processing new project
        if project != last_project:
            time_diff = (last_task_deadline - first_task_deadline).days + 1
            duration_str = format_days(time_diff)
            print(f"\n{last_project:<{max_project_len}} {duration_str:<4} {last_task_deadline.strftime('%Y-%m-%d')}")
            print(current_project_output.rstrip())
            current_project_output = ""

            last_project = project
            first_task_deadline = current_deadline
            last_task_deadline = None
        
        duration_str = format_hours(event['estimated_hrs'])
        hours_given_day = str(HOURS_PER_DAY[event['date'].strftime('%A')]) + "h"
        current_project_output += f"  {task:<{max_task_len}} {duration_str:<{max_duration_len}} {event['date'].strftime('%a')} {hours_given_day:<6} {event['date'].strftime('%Y-%m-%d')}\n"
        last_task_deadline = current_deadline
    
    # Print the last project
    if last_project:
        time_diff = (last_task_deadline - first_task_deadline).days + 1
        duration_str = format_days(time_diff)
        print(f"\n{last_project:<{max_project_len}} {duration_str:<4} {last_task_deadline.strftime('%Y-%m-%d')}")
        print(current_project_output.rstrip())

    print()

    if no_sync:
        return

    # Get calendar ID ONCE before starting event creation
    service = get_service()
    calendar_list = service.calendarList().list().execute()
    calendar_id = None
    
    for calendar in calendar_list['items']:
        if calendar['summary'] == calendar_name:
            calendar_id = calendar['id']
            break
    
    if not calendar_id:
        raise ValueError(f"Calendar '{calendar_name}' not found")

    # Delete all existing events first
    delete_all_events(calendar_name)

    def create_event_wrapper(event):
        service = get_service()  # Get fresh service for each thread
        event_date = event['date'].strftime("%Y-%m-%d")
        title = f"{event['estimated_hrs']}hrs - {event['project']}: {event['task']}"
        description = (
            f"{event['task']}\n"
            f"Estimated time: {event['estimated_hrs']} hours"
        )
        event_body = {
            'summary': title,
            'description': description,
            'start': {
                'date': event_date,
                'timeZone': 'UTC',
            },
            'end': {
                'date': event_date,
                'timeZone': 'UTC',
            }
        }
        create_event_with_retry(service, calendar_id, event_body)

    # Create new events in parallel
    print(f"\nStarting to create {len(events)} calendar events...")
    with ThreadPoolExecutor(max_workers=3) as executor:
        list(executor.map(create_event_wrapper, events))
    
    print("Successfully created all events!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Schedule tasks from CSV into calendar')
    parser.add_argument('filepath', type=str, help='Path to the todos.csv file')
    parser.add_argument('--start-today', action='store_false', default=True, help='Start scheduling from today instead of tomorrow (default: start tomorrow)')
    parser.add_argument('--no-sync', action='store_true', default=False, help='Print schedule without updating Google Calendar')
  
    args = parser.parse_args()
    
    # Convert string path to Path object and verify it exists
    filepath = Path(args.filepath)
    if not filepath.exists():
        raise FileNotFoundError(f"Could not find file: {filepath}")
    
    schedule_tasks(filepath, start_tomorrow=args.start_today, no_sync=args.no_sync)
