#!/usr/bin/env python3

import argparse
from typing import List, Tuple
import sys
import tempfile
import shutil
import os

def normalize_row_length(rows: List[str]) -> List[str]:
    """
    Ensure all rows have consistent formatting.
    """
    return [row if row else '' for row in rows]

def get_column_widths(file_path: str) -> Tuple[List[int], List[str]]:
    """
    Read the file line by line to preserve original commas and determine column widths.
    Returns the list of column widths and the original lines.
    """
    max_widths: List[int] = []
    original_lines: List[str] = []
    
    try:
        with open(file_path, 'r') as file:
            for line in file:
                line = line.rstrip('\n')
                original_lines.append(line)
                
                if not line.strip():
                    continue
                    
                # Split on comma but keep the comma with the preceding field
                parts = [p.strip() for p in line.split(',')]
                
                # Initialize max_widths if this is the first line with content
                if not max_widths and parts:
                    max_widths = [0] * len(parts)
                
                # Update maximum widths
                for i, part in enumerate(parts):
                    if i < len(max_widths):
                        current_width = len(part.strip()) + (1 if i < len(parts)-1 else 0)  # +1 for comma
                        max_widths[i] = max(max_widths[i], current_width)
    
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file: {str(e)}", file=sys.stderr)
        sys.exit(1)
        
    return max_widths, original_lines

def format_csv(input_file: str, output_file: str | None = None, preview: bool = False) -> None:
    """
    Format the file with proper alignment, preserving original commas.
    """
    max_widths, original_lines = get_column_widths(input_file)
    
    # Prepare formatted content
    formatted_rows = []
    for line in original_lines:
        if not line.strip():  # Preserve empty lines
            formatted_rows.append('')
            continue
            
        parts = line.split(',')
        formatted_parts = []
        
        for i, part in enumerate(parts):
            part = part.strip()
            if i < len(max_widths):  # Only process within known columns
                padding = max_widths[i] - len(part)
                if i < len(parts) - 1:  # If not the last field, include the comma
                    formatted_parts.append(f"{part}," + " " * padding)
                else:  # Last field doesn't need padding
                    formatted_parts.append(part)
        
        formatted_rows.append("".join(formatted_parts))
    
    formatted_content = "\n".join(formatted_rows)
    
    if preview:
        print(formatted_content)
        return
        
    output_path = output_file if output_file is not None else input_file
    
    # Create a temporary file
    fd, temp_path = tempfile.mkstemp(text=True)
    try:
        with os.fdopen(fd, 'w') as temp_file:
            temp_file.write(formatted_content)
        # Replace the target file with the temporary file
        shutil.move(temp_path, output_path)
        if output_file is not None:
            print(f"Formatted CSV has been written to '{output_file}'")
    except Exception as e:
        print(f"Error writing to file: {str(e)}", file=sys.stderr)
        # Clean up the temporary file if it still exists
        if os.path.exists(temp_path):
            os.unlink(temp_path)
        sys.exit(1)

def main() -> None:
    parser = argparse.ArgumentParser(
        description="Format CSV files with dynamic column alignment"
    )
    parser.add_argument(
        "input_file",
        help="Input CSV file to format"
    )
    parser.add_argument(
        "-o", "--output",
        help="Output file (optional, defaults to overwriting input file)",
        default=None
    )
    parser.add_argument(
        "-p", "--preview",
        help="Preview the formatted output without writing to file",
        action="store_true"
    )
    
    args = parser.parse_args()
    format_csv(args.input_file, args.output, args.preview)

if __name__ == "__main__":
    main()